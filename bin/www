#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var config = require('../routes/conf/conf');
var debug = require('debug')('wasabi:server');
var http = require('http');
var https = require('https');
var spdy = require('spdy')
const fs = require('fs')
/**
 * Get port from environment and store in Express.
 */

var portHttp = normalizePort('8081');
var portHttps = normalizePort('444'); //443

app.set('portHttp', portHttp);
app.set('portHttps', portHttps);
/**
 * Create HTTP server.
 */
var serverHttp = http.createServer(app).listen(portHttp);
serverHttp.on('error', onError);
serverHttp.on('listening', onListening);
/**
 * Create HTTPS server.
 */
var serverHttps = spdy.createServer({
  key: fs.readFileSync('./' + config.https.wasabi_key),
  cert: fs.readFileSync('./' + config.https.wasabi_crt)
}, app).listen(portHttps);
serverHttps.on('error', onErrorHttps);
serverHttps.on('listening', onListeningHttps);
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    console.log('Le serveur Ã©coute sur le port ' + port);
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  // handle specific listen errors with friendly messages
  handleErrorServer(error, portHttp);
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = serverHttp.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.portHttp;
  debug('Listening on ' + bind);
}
/**
 * Event listener for HTTPS server "error" event.
 */
function onErrorHttps(error) {
  // handle specific listen errors with friendly messages
  handleErrorServer(error, portHttps);
}
/**
 * Event listener for HTTPS server "listening" event.
 */
function onListeningHttps() {
  var addr = serverHttps.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.portHttp;
  debug('Listening on ' + bind);
}

function handleErrorServer(error, port) {
  if (error.syscall !== 'listen') throw error;
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}