{
  "_args": [
    [
      "ejs",
      "C:\\Users\\fjauvat\\Desktop\\wasabi_fabrice"
    ]
  ],
  "_from": "ejs@*",
  "_id": "ejs@2.3.4",
  "_inCache": true,
  "_location": "/ejs",
  "_nodeVersion": "0.12.4",
  "_npmUser": {
    "email": "mde@fleegix.org",
    "name": "mde"
  },
  "_npmVersion": "2.10.1",
  "_phantomChildren": {},
  "_requested": {
    "name": "ejs",
    "raw": "ejs",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/ejs/-/ejs-2.3.4.tgz",
  "_shasum": "3c76caa09664b3583b0037af9dc136e79ec68b98",
  "_shrinkwrap": null,
  "_spec": "ejs",
  "_where": "C:\\Users\\fjauvat\\Desktop\\wasabi_fabrice",
  "author": {
    "email": "mde@fleegix.org",
    "name": "Matthew Eernisse",
    "url": "http://fleegix.org"
  },
  "bugs": {
    "url": "https://github.com/mde/ejs/issues"
  },
  "contributors": [
    {
      "name": "Timothy Gu",
      "email": "timothygu99@gmail.com",
      "url": "https://timothygu.github.io"
    }
  ],
  "dependencies": {},
  "description": "Embedded JavaScript templates",
  "devDependencies": {
    "browserify": "^8.0.3",
    "istanbul": "~0.3.5",
    "jake": "^8.0.0",
    "jsdoc": "^3.3.0-beta1",
    "lru-cache": "^2.5.0",
    "mocha": "^2.1.0",
    "rimraf": "^2.2.8",
    "uglify-js": "^2.4.16"
  },
  "directories": {},
  "dist": {
    "shasum": "3c76caa09664b3583b0037af9dc136e79ec68b98",
    "tarball": "http://registry.npmjs.org/ejs/-/ejs-2.3.4.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/mde/ejs",
  "installable": true,
  "keywords": [
    "ejs",
    "engine",
    "template"
  ],
  "license": "Apache-2.0",
  "main": "./lib/ejs.js",
  "maintainers": [
    {
      "name": "tjholowaychuk",
      "email": "tj@vision-media.ca"
    },
    {
      "name": "mde",
      "email": "mde@fleegix.org"
    }
  ],
  "name": "ejs",
  "optionalDependencies": {},
  "readme": "# EJS\r\n\r\nEmbedded JavaScript templates\r\n\r\n[![Build Status](https://img.shields.io/travis/mde/ejs/master.svg?style=flat)](https://travis-ci.org/mde/ejs)\r\n[![Developing Dependencies](https://img.shields.io/david/dev/mde/ejs.svg?style=flat)](https://david-dm.org/mde/ejs#info=devDependencies)\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install ejs\r\n```\r\n\r\n## Features\r\n\r\n  * Control flow with `<% %>`\r\n  * Escaped output with `<%= %>`\r\n  * Unescaped raw output with `<%- %>`\r\n  * Trim-mode ('newline slurping') with `-%>` ending tag\r\n  * Custom delimiters (e.g., use '<? ?>' instead of '<% %>')\r\n  * Includes\r\n  * Client-side support\r\n  * Static caching of intermediate JavaScript\r\n  * Static caching of templates\r\n  * Complies with the [Express](http://expressjs.com) view system\r\n\r\n## Example\r\n\r\n```html\r\n<% if (user) { %>\r\n  <h2><%= user.name %></h2>\r\n<% } %>\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar template = ejs.compile(str, options);\r\ntemplate(data);\r\n// => Rendered HTML string\r\n\r\nejs.render(str, data, options);\r\n// => Rendered HTML string\r\n```\r\n\r\nYou can also use the shortcut `ejs.render(dataAndOptions);` where you pass\r\neverything in a single object. In that case, you'll end up with local variables\r\nfor all the passed options.\r\n\r\n## Options\r\n\r\n  - `cache`           Compiled functions are cached, requires `filename`\r\n  - `filename`        Used by `cache` to key caches, and for includes\r\n  - `context`         Function execution context\r\n  - `compileDebug`    When `false` no debug instrumentation is compiled\r\n  - `client`          Returns standalone compiled function\r\n  - `delimiter`       Character to use with angle brackets for open/close\r\n  - `debug`           Output generated function body\r\n  - `_with`           Whether or not to use `with() {}` constructs. If `false` then the locals will be stored in the `locals` object.\r\n  - `rmWhitespace`    Remove all safe-to-remove whitespace, including leading\r\n    and trailing whitespace. It also enables a safer version of `-%>` line\r\n    slurping for all scriptlet tags (it does not strip new lines of tags in\r\n    the middle of a line).\r\n\r\n## Tags\r\n\r\n  - `<%`              'Scriptlet' tag, for control-flow, no output\r\n  - `<%=`             Outputs the value into the template (HTML escaped)\r\n  - `<%-`             Outputs the unescaped value into the template\r\n  - `<%#`             Comment tag, no execution, no output\r\n  - `<%%`             Outputs a literal '<%'\r\n  - `%>`              Plain ending tag\r\n  - `-%>`             Trim-mode ('newline slurp') tag, trims following newline\r\n\r\n## Includes\r\n\r\nIncludes either have to be an absolute path, or, if not, are assumed as\r\nrelative to the template with the `include` call. (This requires the\r\n`filename` option.) For example if you are including `./views/user/show.ejs`\r\nfrom `./views/users.ejs` you would use `<%- include('user/show') %>`.\r\n\r\nYou'll likely want to use the raw output tag (`<%-`) with your include to avoid\r\ndouble-escaping the HTML output.\r\n\r\n```html\r\n<ul>\r\n  <% users.forEach(function(user){ %>\r\n    <%- include('user/show', {user: user}) %>\r\n  <% }); %>\r\n</ul>\r\n```\r\n\r\nIncludes are inserted at runtime, so you can use variables for the path in the\r\n`include` call (for example `<%- include(somePath) %>`). Variables in your\r\ntop-level data object are available to all your includes, but local variables\r\nneed to be passed down.\r\n\r\nNOTE: Include preprocessor directives (`<% include user/show %>`) are\r\nstill supported.\r\n\r\n## Custom delimiters\r\n\r\nCustom delimiters can be applied on a per-template basis, or globally:\r\n\r\n```javascript\r\nvar ejs = require('ejs'),\r\n    users = ['geddy', 'neil', 'alex'];\r\n\r\n// Just one template\r\nejs.render('<?= users.join(\" | \"); ?>', {users: users}, {delimiter: '?'});\r\n// => 'geddy | neil | alex'\r\n\r\n// Or globally\r\nejs.delimiter = '$';\r\nejs.render('<$= users.join(\" | \"); $>', {users: users});\r\n// => 'geddy | neil | alex'\r\n```\r\n\r\n## Caching\r\n\r\nEJS ships with a basic in-process cache for caching the intermediate JavaScript\r\nfunctions used to render templates. It's easy to plug in LRU caching using\r\nNode's `lru-cache` library:\r\n\r\n```javascript\r\nvar ejs = require('ejs')\r\n  , LRU = require('lru-cache');\r\nejs.cache = LRU(100); // LRU cache with 100-item limit\r\n```\r\n\r\nIf you want to clear the EJS cache, call `ejs.clearCache`. If you're using the\r\nLRU cache and need a different limit, simple reset `ejs.cache` to a new instance\r\nof the LRU.\r\n\r\n## Layouts\r\n\r\nEJS does not specifically support blocks, but layouts can be implemented by\r\nincluding headers and footers, like so:\r\n\r\n\r\n```html\r\n<%- include('header') -%>\r\n<h1>\r\n  Title\r\n</h1>\r\n<p>\r\n  My page\r\n</p>\r\n<%- include('footer') -%>\r\n```\r\n\r\n## Client-side support\r\n\r\nGo to the [Latest Release](https://github.com/mde/ejs/releases/latest), download\r\n`./ejs.js` or `./ejs.min.js`.\r\n\r\nInclude one of these on your page, and `ejs.render(str)`.\r\n\r\n## Related projects\r\n\r\nThere are a number of implementations of EJS:\r\n\r\n * TJ's implementation, the v1 of this library: https://github.com/tj/ejs\r\n * Jupiter Consulting's EJS: http://www.embeddedjs.com/\r\n * EJS Embedded JavaScript Framework on Google Code: https://code.google.com/p/embeddedjavascript/\r\n * Sam Stephenson's Ruby implementation: https://rubygems.org/gems/ejs\r\n * Erubis, an ERB implementation which also runs JavaScript: http://www.kuwata-lab.com/erubis/users-guide.04.html#lang-javascript\r\n\r\n## License\r\n\r\nLicensed under the Apache License, Version 2.0\r\n(<http://www.apache.org/licenses/LICENSE-2.0>)\r\n\r\n- - -\r\nEJS Embedded JavaScript templates copyright 2112\r\nmde@fleegix.org.\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mde/ejs.git"
  },
  "scripts": {
    "coverage": "istanbul cover node_modules/mocha/bin/_mocha",
    "devdoc": "rimraf out && jsdoc -p -c jsdoc.json lib/* docs/jsdoc/*",
    "doc": "rimraf out && jsdoc -c jsdoc.json lib/* docs/jsdoc/*",
    "test": "mocha"
  },
  "version": "2.3.4"
}
